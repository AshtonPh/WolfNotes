const {DOMParser} = require('linkedom');
const express = require("express");
const router = express.Router();
router.use(express.json());

const OFFLINE_AVAILABLE_PAGES = [
    '/home/',
    '/notes/',
    '/offline/'
];

const STATIC_RESOURCES = [

]

/**
 * A cache of the resource list generated by buildAssetList
 */
let resourceList;

router.get('/', (req, res) => {
    res.send({'check': true});
});

router.get('/resources', async (req, res) => {
    if (!resourceList) {
        resourceList = (await buildAssetList(OFFLINE_AVAILABLE_PAGES))
            .concat(STATIC_RESOURCES);
    }
    let clientHost = `${req.protocol}://${req.hostname}`;
    res.send(
        resourceList.map(r => r.replace('http://proxy', clientHost))
    );
});

/** Extract the URL from javascript import statements */
const jsImportRegex = /(?<=(import (.+)?(from.?))?['"`]).+(?=['"`])/;
/** Extract the URL from css import statements */
const cssImportRegex = /(?<=(@import *)["']).+(?=["'])|(?<=(url\()["']).+(?=["'])/;

/**
 * Crawl a set of pages for all assets needed for offline functionality
 * 
 * @param {string[]} pages a list of webpages (relative URLs are fine) to crawl
 * @returns {Promise<string[]>} a list of absolute URLs to every asset needed by those pages
 */
async function buildAssetList(pages) {
    let assetList = [];
    let discoveredSources = [];
    let srcQueue = [];

    // Get the absolute URL of all provided pages and push them to the queue
    for (let page of pages) {
        let start = new URL(page, "http://proxy/");
        srcQueue.push({ url: start.href, type: 'html' });
    }
    
    // Work through the queue until all resources have been found
    while (srcQueue.length > 0) {
        let pop = srcQueue.shift()
        let response = await fetch(pop.url);
        if (!response.ok)
            continue;
        let body = await response.text();
        
        // For HTML documents, parse any scripts, preloads, and stylesheets and add them to the queue
        if (pop.type == 'html') {
            let dp = new DOMParser();
            let doc = dp.parseFromString(body, 'text/html')
            let scripts = doc.querySelectorAll('script');
            let preloads = doc.querySelectorAll('link[rel="modulepreload"]');
            let css = doc.querySelectorAll('link[rel="stylesheet"]')

            // Discover any script and module preloads and push them to the queue as js
            let relativeScriptURLs = Array.from(scripts)
                .map(v => v.src);
            let relativePreloadURLs = Array.from(preloads)
                .map(v => v.href);
            let absJsURLs = relativeScriptURLs
                .concat(relativePreloadURLs)
                .map(u => new URL(u, pop.url).href)
                .filter(u => u && u.length > 0 && !discoveredSources.includes(u));
            absJsURLs.forEach(u => 
                {
                    discoveredSources.push(u);
                    srcQueue.push({ url: u, type: 'js' })
                });
            
            // Discover any stylesheets and push them to the queue as css
            Array.from(css)
                .map(v => new URL(v.href, pop.url).href)
                .filter(u => !discoveredSources.includes(u))
                .forEach(u => {
                    discoveredSources.push(u);
                    srcQueue.push({ url: u, type: 'css' })
                });
        }
        // For JS scripts, parse any import statements and add them to the queue
        if (pop.type == 'js') {
            let statements = body.split('\n')
                .flatMap(s => s.split(';'))
                .map(s => s.trim())
                .filter(s => s.startsWith('import'));
            let urls = statements
                .map(s => jsImportRegex.exec(s))
                .filter(r => r != null)
                .map(r => new URL(r[0], pop.url).href);
            urls.filter(u => !discoveredSources.includes(u)).forEach(u => {
                discoveredSources.push(u);
                srcQueue.push({ url: u, type: 'js' });
            });
        }
        // For stylesheets, parse any import statements and add them to the queue
        if (pop.type == 'css') {
            let statements = body.split('\n')
                .flatMap(s => s.split(';'))
                .map(s => s.trim())
                .filter(s => s.startsWith('@import') || s.includes('url'));
            let urls = statements
                .map(s => cssImportRegex.exec(s))
                .filter(r => r != null)
                .map(r => new URL(r[0], pop.url).href);
            urls.filter(u => !discoveredSources.includes(u)).forEach(u => {
                discoveredSources.push(u);
                srcQueue.push({ url: u, type: 'js' });
            });
        }
        assetList.push(pop.url);
    }
    return Array.from(new Set(assetList));
}

module.exports = router;